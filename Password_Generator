import random

lower = "abcdefghijklmnoqrstuvwsyz"
upper = "ABCDEFGHIJKLMNOPQRSTUVWSYZ"
number = "1234567890"
symbols = "!@#$%^&*()_+=<>?,./\"\":;\'\\|~`"
all = lower + upper + number + symbols
length = int(input())
password = "".join(random.sample(all,length))
print("The password is ",password)

import tkinter as tk
from tkinter import messagebox
import random
import re

class PasswordManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Manager")

        # GUI Components
        self.password_label = tk.Label(root, text="Enter Password:", font=("Arial", 12))
        self.password_label.grid(row=0, column=0, padx=10, pady=5)

        self.password_entry = tk.Entry(root, width=30, font=("Arial", 12), show="*")
        self.password_entry.grid(row=0, column=1, padx=10, pady=5)

        self.validate_btn = tk.Button(root, text="Validate Password", font=("Arial", 12), command=self.validate_password)
        self.validate_btn.grid(row=0, column=2, padx=10, pady=5)

        self.generate_btn = tk.Button(root, text="Generate Password", font=("Arial", 12), command=self.generate_password)
        self.generate_btn.grid(row=1, column=0, columnspan=3, pady=10)

        self.save_btn = tk.Button(root, text="Save Password", font=("Arial", 12), command=self.save_password)
        self.save_btn.grid(row=2, column=0, columnspan=3, pady=10)

    # Password Validation Function
    def validate_password(self):
        password = self.password_entry.get()
        if len(password) < 8:
            messagebox.showerror("Invalid Password", "Password must be at least 8 characters long.")
            return
        if not re.search("[a-z]", password):
            messagebox.showerror("Invalid Password", "Password must contain at least one lowercase letter.")
            return
        if not re.search("[A-Z]", password):
            messagebox.showerror("Invalid Password", "Password must contain at least one uppercase letter.")
            return
        if not re.search("[0-9]", password):
            messagebox.showerror("Invalid Password", "Password must contain at least one digit.")
            return
        if not re.search("[!@#$%^&*()_+=<>?,./\"':;\\|~`]", password):
            messagebox.showerror("Invalid Password", "Password must contain at least one special character.")
            return
        messagebox.showinfo("Valid Password", "Your password is strong!")

    # Password Generation Function
    def generate_password(self):
        lower = "abcdefghijklmnopqrstuvwxyz"
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        number = "1234567890"
        symbols = "!@#$%^&*()_+=<>?,./\"':;\\|~`"
        all_chars = lower + upper + number + symbols
        password = "".join(random.sample(all_chars, 12))  # Generate a 12-character password
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, password)
        messagebox.showinfo("Password Generated", f"Generated Password: {password}")

    # Save Password Function
    def save_password(self):
        password = self.password_entry.get()
        if not password:
            messagebox.showerror("Error", "No password to save!")
            return
        with open("passwords.txt", "a") as file:
            file.write(password + "\n")
        messagebox.showinfo("Password Saved", "Password saved successfully!")
        self.password_entry.delete(0, tk.END)

# Main Program
if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordManager(root)
    root.mainloop()
