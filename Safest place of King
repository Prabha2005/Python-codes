def is_safe(board, x, y, n):
    # Check rows and columns for rooks and queens
    for i in range(n):
        if board[x][i] in 'rq' or board[i][y] in 'rq':
            return False
    
    # Check diagonals for queens and bishops
    for i in range(-n, n):
        if 0 <= x+i < n and 0 <= y+i < n and board[x+i][y+i] in 'qb':
            return False
        if 0 <= x+i < n and 0 <= y-i < n and board[x+i][y-i] in 'qb':
            return False
    
    # Check knights' moves
    knight_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
    for dx, dy in knight_moves:
        if 0 <= x+dx < n and 0 <= y+dy < n and board[x+dx][y+dy] == 'k':
            return False
    
    return True

def find_safest_places(n, knights, rooks, bishops, queens):
    board = [['*' for _ in range(n)] for _ in range(n)]
    
    # Place knights
    for x, y in knights:
        board[x][y] = 'k'
    
    # Place rooks
    for x, y in rooks:
        board[x][y] = 'r'
    
    # Place bishops
    for x, y in bishops:
        board[x][y] = 'b'
    
    # Place queens
    for x, y in queens:
        board[x][y] = 'q'
    
    # Find safe places for the king
    safe_places = []
    for x in range(n):
        for y in range(n):
            if board[x][y] == '*' and is_safe(board, x, y, n):
                safe_places.append((x, y))
    
    return safe_places

# User input
n = int(input("size of the chessboard (n): "))

kn = int(input("the number of knights: "))
knights = []
for _ in range(kn):
    x, y = map(int, input("position of a knight (x y): ").split())
    knights.append((x, y))

rn = int(input("number of rooks: "))
rooks = []
for _ in range(rn):
    x, y = map(int, input("position of a rook (x y): ").split())
    rooks.append((x, y))

bn = int(input("number of bishops: "))
bishops = []
for _ in range(bn):
    x, y = map(int, input("position of a bishop (x y): ").split())
    bishops.append((x, y))

qn = int(input("number of queens: "))
queens = []
for _ in range(qn):
    x, y = map(int, input("position of a queen (x y): ").split())
    queens.append((x, y))

# Find safe places for the king
safe_places = find_safest_places(n, knights, rooks, bishops, queens)

# Output the result
print("Number of safest places:", len(safe_places))
print("Safe places:", safe_places)
